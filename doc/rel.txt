*rel.txt*         Define and follow links to resources with
                _____  _____  ____     __ __  ___  __  __  ~
               /  _  \/   __\/  _/    /  |  \/___\/  \/  \ ~
               |  _  <|   __||  |--- _\  |  /|   ||  \/  | ~
               \__|\_/\_____/\_____/<_>\___/ \___/\__ \__/ ~
                                 Resource Linking for Vim  ~

=============================================================================
USAGE                                                           *rel-usage* *rel*

Press `<C-k>` to follow the link under the cursor.  If the link begins with a
`scheme:` it will be resolved to determine the program to execute to open the
link.  A link may also contain a fragment that determines the cursor location
in the newly opened file.
                                                                *rel-rels*
RELs ~

The links that `rel.vim` uses consist of only non-whitespace characters.  Any
sequence of non-whitespace characters under the cursor will be passed along
and interpreted as a link.

To include a space character in a link you can use `%20`.

If the tilde `~` character appears at the beginning of the link it is
expanded to the value of `$HOME`.
                                                                *rel-fragments*
Fragments ~

Links to local text files opened by vim may be suffixed with a fragment part
that determines where to place the cursor in the newly opened buffer.

A Line fragment (`#:<number>`) jumps places the cursor at a specific line and
a search fragment (`#/<text>`) finds a text to place the cursor over.

Here is a link to files with a line and a text fragment: >

        ~/.vimrc#:10
        ~/.vimrc#/set
>
SCHEMES                                                         *rel-schemes*

The vanilla version of `rel.vim` defines actions for 2 schemes.  See
|rel-config| on how to define your own.

http: ~

If a `http://` or `https://` URL is encountered rel will execute the command
in `g:rel_http` passing the url to open it.

man: ~

The `man:` scheme will cause `rel.vim` to open a man page using the `:Man`
command.  It will complain if there is no such command.

As with files the `#/` and `#:` fragments can be used to jump to a specific
position in the manpage.

MAPPING                                                         *rel-mapping*

You can map a key combination of your liking to `<Plug>(Rel)` to create a
shortcut for following a link.  If no map exists the default is: >

        :nmap <C-k> <Plug>(Rel)
<
CONFIGURATION                                                   *rel-config*

Http browser ~
                                                                *g:rel_http*

Change the program to run when opening an `http` or `https` URL: >

        let g:rel_http = 'lynx %s'
<
The string `%s` will be replaced with the link.

Opening a buffer ~
                                                                *g:rel_open*

Change `g:rel_open` to determine how a buffer should be opened when
following a link: >

        let g:rel_open = 'tabnew'
>
Set this to one of the vim commands used to open a file: |:tabnew|, |:vsplit|,
|:split|.

External programs ~
                                                                *g:rel_extmap*

You can define a dictionary of extensions mapping to programs to determine how
to open a link by its extension: >

        let g:rel_extmap = {
            \ 'jpg': 'gimp %s'
            \ }
<
In the rhs of these maps `%s` will be replaced with the link to the file.

Custom schemas ~
                                                                *g:rel_schemes*

Not implemented yet.

The variable `g:rel_schemes` may contain a mapping between a regular
expression to match a link and a function to run if the regex matches.

ABOUT                                                           *rel-about*

The inspiration for this script came from `UTL.vim`, which has similar goals,
see http://www.vim.org/scripts/script.php?script_id=293

The latest version of `rel.vim` is available on GitHub:

    http://github.com/aklt/rel.vim

Released under the same terms as vim, see |license|

vim:tw=78:et:ft=help:norl:
