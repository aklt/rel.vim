*rel.txt*         Define and follow links to resources with
==============================================================================
                _____  _____  ____     __ __  ___  __  __                    ~
               /  _  \/   __\/  _/    /  |  \/___\/  \/  \                   ~
               |  _  <|   __||  |---  \  |  /|   ||  \/  |                   ~
               \__|\_/\_____/\_____/<_>\___/ \___/\__/\__/                   ~
                                 Resource Linking for Vim                    ~
                                                                             ~
=================================================================== v0.2.0 ===

DESCRIPTION                                           *Rel* *rel-description* *rel*

Press `<C-k>` in normal mode to follow the link under the cursor.  If the link
begins with a `scheme:` it will be resolved to determine how to open the link.
If a link ends in a known suffix it will be opened by the mapping to a known
program.  Also, link opened in vim may contain a fragment part to determine
where to place the cursor in the newly opened file.

                                                           *rel-rels* *rel-links*
RELs ~

The links that `rel.vim` uses consist of only non-whitespace characters except
" < and >.  Special characters can be included as escaped URL entities, ie. to
include a space character in a link you can use `%20`.

If the tilde `~` character appears at the beginning of a link it is expanded
to the value of `$HOME`.
                                                                *rel-fragments*
Fragments ~

Links to text files opened in vim may be suffixed with a fragment part that
determines where to place the cursor in the newly opened buffer.

A Line fragment (`#:<number>`) places the cursor at a specific line.  A search
fragment (`#/<text>`) finds a text in the opened file to place the cursor
over.

For example:

        ~/.vimrc#:10

will place the cursor on line 10 of the `$HOME/.vimrc` file and

        ~/.vimrc#/set

will place the cursor at the first occurrence of the string "set" in this
file.

Note that fragments function only for text files opened in vim and for the
built in `help:` of `man:` schemes.
                                                                   *rel-suffix*
Suffixes ~

A map between a suffix and a program can be defined in |g:rel_extmap| to
determine which program to use to open links with a specific suffix.

                                                                  *rel-schemes*
Schemes ~

This plugin defines 2 special schemes, `help:` to lookup vim help files and
`man:` to use the |man.vim| script to read man pages.  For example >

        help:rel.txt#/The%20%60help:
<
should refer to this sentence.  Note that `%60` translates to the backtick
character before the "help" text.

If `man.vim` is loaded then following the link: >

         man:vim#/^ON-LINE
<
should open the vim man page using the |:Man| command.

Finally, if an `http://`, `https://` or `ftp://` URL is encountered the
command in |g:rel_http| will be run, passing the url to open it.

See |g:rel_schemes| on how to define more schemes.

CONFIGURATION                                                      *rel-config*

                                                                      *rel-map*
Map ~

You can map a key combination of your liking to `<Plug>(Rel)` to follow a
link.  If no map exists the default is: >

        :nmap <C-k> <Plug>(Rel)
<
                                                                   *g:rel_http*
Http browser ~

Change the program to run when opening an `http` or `https` URL: >

        let g:rel_http = 'firefox %s'
<
The string `%s` will be replaced with the link.

                                                                   *g:rel_open*
Opening a buffer ~

Change `g:rel_open` to determine how a buffer should be opened when following
a link: >

        let g:rel_open = 'vsplit'
>
Set this to one of the vim commands used to open a file: |:tabnew|, |:vsplit|,
|:split|.  Note that this does not affect how `man:` links are opened.  See
|:Man| on how to change how the buffer for man pages is opened.

                                                              *g:rel_modifiers*

The value of `g:rel_modifiers` determines how to open a buffer when
`g:rel_open` is not |:tabnew|.  For possible values, see |:vert|.

                                                                 *g:rel_extmap*
External programs ~

You can define a dictionary of extensions mapping to programs to determine how
files with this suffix should be opened.  The default value is: >

        let g:rel_extmap = {
            \ 'html': 'firefox %s'
            \ }
<
In the rhs of these maps `%s` will be replaced with the link to the file.

                                                                *g:rel_schemes*
Custom schemes ~

The variable `g:rel_schemes` may contain a mapping between a scheme and a
string or a function to rewrite the link to determine how that link should be
opened.  Once the link has been rewritten all of the known methods of opening
links are tried again.  This allows rewriting links several times over.

String scheme value ~

If the value in the mapping dictionary is a string it may contain the special
strings `%p`, which will be replaced with the path part of the link and `%f`,
which will be replaced with the fragment part.  This can be used to create
shortcuts to paths. For example: >

        let g:rel_schemes = {
            \ 'plugin': $HOME . '/.vim/plugin/%p.vim#%f'
            \ }
<
would allow referring to a file in the local vim plugins using only the files
basename, for example: >

        plugin:mark#:20
<
would refer to line 20 of the `$HOME/.vim/plugin/mark.vim` file, if it exists.

Function scheme value ~

If the value in the `g:rel_schemes` dictionary is a |Funcref| then it is
called with a List of `[full_link, path_part, fragment_part]` and what this
function returns will determines what will happen.  Returning

- `"a string"` will cause this string to be passed to each of the known methods
  for opening links, possibly opening the link.

- the value `1` indicates that the function has opened the link and no further
  methods will be tried.

- the value `0` indicates that the function could not open the link and the
  remaining methods should be tried.

                                                              *g:rel_highlight*
Syntax highlight links ~

Set this to a value above 0 to get syntax highlighting of text that looks like
links that would be followed. More is highlighted the higher the value.

Setting >

        let g:rel_highlight = 1
<
will highlight links defined as part of a scheme in |g:rel_schemes|. >

        let g:rel_highlight = 2
<
will also highlight links with the known suffixes in |g:rel_extmap|. >

        let g:rel_highlight = 3
<
will highlight all text that includes a `#:` or `#/` fragment. >

        let g:rel_highlight = 4
<
will also highlight http, https and ftp URLs. >

Finally go bananas and try to highlight everything that looks remotely like a
link by setting >

        let g:rel_highlight = 5
<
The default is a value of 3.

ABOUT                                                               *rel-about*

The inspiration for this script came from `UTL.vim`, which has similar goals,
see http://www.vim.org/scripts/script.php?script_id=293

The latest version of `rel.vim` is available on GitHub:

    http://github.com/aklt/vim-rel

Released under the same terms as vim, see |license|

vim:tw=78:et:ft=help:norl:
